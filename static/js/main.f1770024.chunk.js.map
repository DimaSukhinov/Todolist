{"version":3,"sources":["api/todolists-api.ts","utils/error-utils.ts","features/todolistList/auth-reducer.ts","app/app-reducer.ts","features/todolists-reducer.ts","features/tasks-reducer.ts","components/AddItemForm.tsx","components/EditableSpan.tsx","features/todolistList/todolist/task/Task.tsx","features/todolistList/todolist/Todolist.tsx","features/todolistList/TodolistList.tsx","app/store.ts","components/ErrorSnackbar.tsx","features/login/Login.tsx","app/App.tsx","reportWebVitals.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","data","handleServerNetworkError","dispatch","message","setAppErrorAC","setAppStatusAC","handleServerAppError","messages","length","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","error","isInitialized","AddItemForm","React","memo","props","useState","setTitle","setError","addItem","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","key","label","helperText","disabled","isDisabled","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","activateEditMode","useCallback","activateViewMode","onEnterPress","onBlur","autoFocus","onDoubleClick","Task","onClickHandler","removeTask","task","onChangeHandler","changeTaskStatus","checked","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","useDispatch","useEffect","then","res","tasks","setTasksAC","items","catch","err","addTask","removeTodolist","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","t","map","style","paddingTop","Button","TodolistsList","navigate","useNavigate","useSelector","state","auth","todos","todolists","resultCode","deleteTaskAC","deleteTaskTC","todoListId","item","addTaskTC","changeStatus","getState","find","startDate","priority","description","deadline","changeTaskStatusAC","changeTaskStatusTC","newTitle","changeTaskTitleAC","changeTaskTitleTC","changeTodolistTitleAC","changeTodolistTitleTC","deleteTodolistAC","addTodolist","todolist","addTodoTC","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","rootReducer","combineReducers","action","stateCopy","forEach","todolistTasks","copyState","app","store","createStore","applyMiddleware","thunk","useAppSelector","window","Alert","forwardRef","ref","elevation","ErrorSnackbar","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","to","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","App","finally","logout","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f1770024.chunk.js","sourcesContent":["import axios, {AxiosResponse} from 'axios'\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'dcd313e2-b979-4eda-adb9-5de92d986fad'\r\n    }\r\n})\r\n\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists')\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title})\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`)\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title})\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<ResponseType<meDataType>>(`auth/me`)\r\n    },\r\n    login(data: LoginParamsType) {\r\n        return instance.post<LoginParamsType, ResponseType<{ userId: number }>>(`auth/login`, data)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>(`auth/login`)\r\n    }\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\n\r\ntype meDataType = {\r\n    id: string\r\n    login: string\r\n    email: string\r\n}","import {setAppErrorAC, setAppStatusAC} from '../app/app-reducer'\r\nimport {Dispatch} from 'redux'\r\nimport {ResponseType} from '../api/todolists-api'\r\n\r\nexport const handleServerNetworkError = (dispatch: Dispatch, message: string) => {\r\n    dispatch(setAppErrorAC(message))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerAppError = <T>(dispatch: Dispatch, data: ResponseType<T>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}","import {Dispatch} from 'redux'\r\nimport {AppActionsType, setAppStatusAC} from '../../app/app-reducer'\r\nimport {authAPI, LoginParamsType} from '../../api/todolists-api'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {AxiosError} from 'axios'\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) => {\r\n    return {type: 'login/SET-IS-LOGGED-IN', value} as const\r\n}\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(data)\r\n        .then((res) => {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setIsLoggedInAC(true))\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        })\r\n}\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        })\r\n}\r\n\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | AppActionsType","import {Dispatch} from 'redux';\r\nimport {authAPI} from '../api/todolists-api';\r\nimport {setIsLoggedInAC} from '../features/todolistList/auth-reducer';\r\nimport {handleServerAppError, handleServerNetworkError} from '../utils/error-utils';\r\nimport {AxiosError} from 'axios';\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n    status: 'loading' as RequestStatusType,\r\n    error: null as string | null,\r\n    isInitialized: false\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: AppActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/SET-INITIALIZED':\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const setAppStatusAC = (status: RequestStatusType) => {\r\n    return {type: 'APP/SET-STATUS', status} as const\r\n}\r\nexport const setAppErrorAC = (error: string | null) => {\r\n    return {type: 'APP/SET-ERROR', error} as const\r\n}\r\nexport const setAppIsInitializedAC = (isInitialized: boolean) => {\r\n    return {type: 'APP/SET-INITIALIZED', isInitialized} as const\r\n}\r\n\r\n// thunks\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.me()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(setIsLoggedInAC(true))\r\n            } else {\r\n                dispatch(setAppStatusAC('failed'))\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        })\r\n        .finally(() => {\r\n            dispatch(setAppIsInitializedAC(true))\r\n        })\r\n}\r\n\r\nexport type AppActionsType =\r\n    ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n    | ReturnType<typeof setAppIsInitializedAC>","import {todolistsAPI, TodolistType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC} from '../app/app-reducer'\r\nimport {AxiosError} from 'axios'\r\nimport {handleServerAppError, handleServerNetworkError} from '../utils/error-utils'\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'SET-TODOS': {\r\n            return action.todos.map(tl => {\r\n                return {...tl, filter: 'all', isDisabled: 'idle'}\r\n            })\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id !== action.id)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return [{...action.todolist, filter: 'all', isDisabled: 'idle'}, ...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        }\r\n        case 'CHANGE-TODOLIST-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, isDisabled: action.isDisabled} : tl)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const deleteTodolistAC = (todolistId: string) => {\r\n    return {type: 'REMOVE-TODOLIST', id: todolistId} as const\r\n}\r\nexport const addTodolistAC = (todolist: TodolistType) => {\r\n    return {type: 'ADD-TODOLIST', todolist} as const\r\n}\r\nexport const changeTodolistTitleAC = (id: string, title: string) => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', id, title} as const\r\n}\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', id, filter} as const\r\n}\r\nexport const setTodosAC = (todos: TodolistType[]) => {\r\n    return {type: 'SET-TODOS', todos} as const\r\n}\r\nexport const changeTodolistIsDisabledAC = (id: string, isDisabled: RequestStatusType) => {\r\n    return {type: 'CHANGE-TODOLIST-STATUS', id, isDisabled} as const\r\n}\r\n\r\n// thunks\r\nexport const fetchTodosTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTodolists()\r\n        .then((res) => {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setTodosAC(res.data))\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        })\r\n}\r\nexport const deleteTodoTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTodolistIsDisabledAC(todolistId, 'loading'))\r\n    todolistsAPI.deleteTodolist(todolistId)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(deleteTodolistAC(todolistId))\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        })\r\n}\r\nexport const addTodoTC = (title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTodolist(title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        })\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.updateTodolist(id, title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        })\r\n}\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\n\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    isDisabled: RequestStatusType\r\n}\r\n\r\ntype ActionsType =\r\n    ReturnType<typeof deleteTodolistAC>\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | ReturnType<typeof setTodosAC>\r\n    | ReturnType<typeof changeTodolistIsDisabledAC>","import {addTodolistAC, deleteTodolistAC, setTodosAC} from './todolists-reducer'\r\nimport {TaskStatuses, TaskType, todolistsAPI} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../app/store'\r\nimport {setAppStatusAC} from '../app/app-reducer'\r\nimport {AxiosError} from 'axios'\r\nimport {handleServerAppError, handleServerNetworkError} from '../utils/error-utils'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'SET-TODOS': {\r\n            const stateCopy = {...state}\r\n            action.todos.forEach(tl => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy\r\n        }\r\n        case 'SET-TASKS': {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todolistId] = action.tasks\r\n            return stateCopy\r\n        }\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.todolistId]\r\n            stateCopy[action.todolistId] = tasks.filter(t => t.id !== action.taskId)\r\n            return stateCopy\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.task.todoListId]\r\n            stateCopy[action.task.todoListId] = [action.task, ...tasks]\r\n            return stateCopy\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            let todolistTasks = state[action.todolistId]\r\n            state[action.todolistId] = todolistTasks\r\n                .map(t => t.id === action.taskId ? {...t, status: action.status} : t)\r\n            return ({...state})\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            let todolistTasks = state[action.todolistId]\r\n            state[action.todolistId] = todolistTasks\r\n                .map(t => t.id === action.taskId ? {...t, title: action.title} : t)\r\n            return ({...state})\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {...state, [action.todolist.id]: []}\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const deleteTaskAC = (taskId: string, todolistId: string) => {\r\n    return {type: 'REMOVE-TASK', taskId, todolistId} as const\r\n}\r\nexport const addTaskAC = (task: TaskType) => {\r\n    return {type: 'ADD-TASK', task} as const\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, status: TaskStatuses, todolistId: string) => {\r\n    return {type: 'CHANGE-TASK-STATUS', status, todolistId, taskId} as const\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string) => {\r\n    return {type: 'CHANGE-TASK-TITLE', title, todolistId, taskId} as const\r\n}\r\nexport const setTasksAC = (todolistId: string, tasks: TaskType[]) => {\r\n    return {type: 'SET-TASKS', todolistId, tasks} as const\r\n}\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setTasksAC(todolistId, res.data.items))\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        })\r\n}\r\nexport const deleteTaskTC = (todolistId: string, taskId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(deleteTaskAC(taskId, todolistId))\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        })\r\n}\r\nexport const addTaskTC = (todoListId: string, title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todoListId, title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(addTaskAC(res.data.data.item))\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        })\r\n}\r\nexport const changeTaskStatusTC = (taskId: string, todolistId: string, status: TaskStatuses) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const tasks = getState().tasks\r\n        const tasksForCurrentTodolist = tasks[todolistId]\r\n        const task = tasksForCurrentTodolist.find(t => t.id === taskId)\r\n\r\n        if (task) {\r\n            dispatch(setAppStatusAC('loading'))\r\n            todolistsAPI.updateTask(todolistId, taskId, {\r\n                title: task.title,\r\n                startDate: task.startDate,\r\n                priority: task.priority,\r\n                description: task.description,\r\n                deadline: task.deadline,\r\n                status: status\r\n            })\r\n                .then((res) => {\r\n                    if (res.data.resultCode === 0) {\r\n                        dispatch(setAppStatusAC('succeeded'))\r\n                        dispatch(changeTaskStatusAC(taskId, status, todolistId))\r\n                    } else {\r\n                        handleServerAppError(dispatch, res.data)\r\n                    }\r\n                })\r\n                .catch((err: AxiosError) => {\r\n                    handleServerNetworkError(dispatch, err.message)\r\n                })\r\n        }\r\n    }\r\nexport const changeTaskTitleTC = (taskId: string, todolistId: string, newTitle: string) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const tasks = getState().tasks\r\n        const tasksForCurrentTodolist = tasks[todolistId]\r\n        const task = tasksForCurrentTodolist.find(t => t.id === taskId)\r\n\r\n        if (task) {\r\n            dispatch(setAppStatusAC('loading'))\r\n            todolistsAPI.updateTask(todolistId, taskId, {\r\n                title: newTitle,\r\n                startDate: task.startDate,\r\n                priority: task.priority,\r\n                description: task.description,\r\n                deadline: task.deadline,\r\n                status: task.status\r\n            })\r\n                .then((res) => {\r\n                    if (res.data.resultCode === 0) {\r\n                        dispatch(setAppStatusAC('succeeded'))\r\n                        dispatch(changeTaskTitleAC(taskId, newTitle, todolistId))\r\n                    } else {\r\n                        handleServerAppError(dispatch, res.data)\r\n                    }\r\n                })\r\n                .catch((err: AxiosError) => {\r\n                    handleServerNetworkError(dispatch, err.message)\r\n                })\r\n        }\r\n    }\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\ntype ActionsType =\r\n    ReturnType<typeof deleteTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof changeTaskStatusAC>\r\n    | ReturnType<typeof changeTaskTitleAC>\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof deleteTodolistAC>\r\n    | ReturnType<typeof setTodosAC>\r\n    | ReturnType<typeof setTasksAC>","import React, {ChangeEvent, KeyboardEvent, useState} from 'react'\r\nimport TextField from '@mui/material/TextField'\r\nimport IconButton from '@mui/material/IconButton'\r\nimport {AddBox} from '@mui/icons-material'\r\nimport {RequestStatusType} from '../app/app-reducer'\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    isDisabled?: RequestStatusType\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title)\r\n            setTitle('')\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (e.key === 'Enter') {\r\n            addItem()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField variant=\"outlined\"\r\n                       error={!!error}\r\n                       value={title}\r\n                       onChange={onChangeHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       label=\"Title\"\r\n                       helperText={error}\r\n                       disabled={props.isDisabled === 'loading'}\r\n            />\r\n            <IconButton color=\"primary\" onClick={addItem} disabled={props.isDisabled === 'loading'}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, useCallback, useState, KeyboardEvent} from 'react'\r\nimport TextField from '@mui/material/TextField'\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [title, setTitle] = useState(props.value)\r\n\r\n    const activateEditMode = useCallback(() => {\r\n        setEditMode(true)\r\n        setTitle(props.value)\r\n    }, [props])\r\n    const activateViewMode = useCallback(() => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }, [props, title])\r\n    const onEnterPress = useCallback((e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            activateViewMode()\r\n        }\r\n    }, [activateViewMode])\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} onBlur={activateViewMode} onKeyPress={onEnterPress}\r\n                     autoFocus/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n})","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../../components/EditableSpan'\r\nimport {Delete} from '@mui/icons-material'\r\nimport IconButton from '@mui/material/IconButton'\r\nimport Checkbox from '@mui/material/Checkbox'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props])\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeTaskStatus(props.task.id, e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props])\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => props.changeTaskTitle(props.task.id, newValue, props.todolistId), [props])\r\n\r\n    return (\r\n        <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n            <Checkbox\r\n                checked={props.task.status === TaskStatuses.Completed}\r\n                color=\"primary\"\r\n                onChange={onChangeHandler}\r\n            />\r\n\r\n            <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n            <IconButton onClick={onClickHandler}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton'\r\nimport Button from '@mui/material/Button'\r\nimport {Delete} from '@mui/icons-material'\r\nimport {Task} from './task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType} from '../../todolists-reducer'\r\nimport {fetchTasksTC} from '../../tasks-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {RequestStatusType} from '../../../app/app-reducer'\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n    isDisabled: RequestStatusType\r\n}\r\n\r\nexport const Todolist = React.memo( (props: PropsType) => {\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(props.id))\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => props.addTask(title, props.id), [props])\r\n\r\n    const removeTodolist = useCallback(() => props.removeTodolist(props.id), [props])\r\n    const changeTodolistTitle = useCallback((title: string) => props.changeTodolistTitle(props.id, title), [props])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n                <IconButton onClick={removeTodolist} disabled={props.isDisabled === 'loading'}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask} isDisabled={props.isDisabled}/>\r\n            <div>\r\n                {\r\n                    tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                                    removeTask={props.removeTask}\r\n                                                    changeTaskTitle={props.changeTaskTitle}\r\n                                                    changeTaskStatus={props.changeTaskStatus}\r\n                    />)\r\n                }\r\n            </div>\r\n            <div style={{paddingTop: '10px'}}>\r\n                <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                        onClick={onAllClickHandler}\r\n                        color={'inherit'}\r\n                >All\r\n                </Button>\r\n                <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                        onClick={onActiveClickHandler}\r\n                        color={'primary'}>Active\r\n                </Button>\r\n                <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                        onClick={onCompletedClickHandler}\r\n                        color={'secondary'}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodoTC, changeTodolistFilterAC, changeTodolistTitleTC,\r\n    deleteTodoTC, fetchTodosTC, FilterValuesType, TodolistDomainType\r\n} from '../todolists-reducer'\r\nimport {addTaskTC, changeTaskStatusTC, changeTaskTitleTC, deleteTaskTC, TasksStateType} from '../tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport Grid from '@mui/material/Grid'\r\nimport {AddItemForm} from '../../components/AddItemForm'\r\nimport Paper from '@mui/material/Paper'\r\nimport {Todolist} from './todolist/Todolist'\r\nimport {useNavigate} from 'react-router-dom'\r\n\r\nexport const TodolistsList = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const navigate = useNavigate()\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    useEffect(() => {\r\n        if (isLoggedIn) {\r\n            dispatch(fetchTodosTC())\r\n        } else {\r\n            navigate('login')\r\n        }\r\n    }, [isLoggedIn])\r\n    \r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n\r\n    const removeTask = useCallback((id: string, todolistId: string) => dispatch(deleteTaskTC(todolistId, id)), [dispatch])\r\n    const addTask = useCallback((title: string, todolistId: string) => dispatch(addTaskTC(todolistId, title)), [dispatch])\r\n    const changeStatus = useCallback((id: string, status: TaskStatuses, todolistId: string) => dispatch(changeTaskStatusTC(id, todolistId, status)), [dispatch])\r\n    const changeTaskTitle = useCallback((id: string, newTitle: string, todolistId: string) => dispatch(changeTaskTitleTC(id, todolistId, newTitle)), [dispatch])\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => dispatch(changeTodolistFilterAC(todolistId, value)), [dispatch])\r\n    const changeTodolistTitle = useCallback((id: string, title: string) => dispatch(changeTodolistTitleTC(id, title)), [dispatch])\r\n    const removeTodolist = useCallback((id: string) => dispatch(deleteTodoTC(id)), [dispatch])\r\n    const addTodolist = useCallback((title: string) => dispatch(addTodoTC(title)), [dispatch])\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: '20px'}}>\r\n                <AddItemForm addItem={addTodolist}/>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                {\r\n                    todolists.map(tl => {\r\n                        let allTodolistTasks = tasks[tl.id];\r\n\r\n                        return <Grid item key={tl.id}>\r\n                            <Paper style={{padding: '10px'}}>\r\n                                <Todolist\r\n                                    id={tl.id}\r\n                                    title={tl.title}\r\n                                    filter={tl.filter}\r\n                                    isDisabled={tl.isDisabled}\r\n                                    tasks={allTodolistTasks}\r\n                                    removeTask={removeTask}\r\n                                    changeFilter={changeFilter}\r\n                                    addTask={addTask}\r\n                                    changeTaskStatus={changeStatus}\r\n                                    removeTodolist={removeTodolist}\r\n                                    changeTaskTitle={changeTaskTitle}\r\n                                    changeTodolistTitle={changeTodolistTitle}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    })\r\n                }\r\n            </Grid>\r\n        </>\r\n    )\r\n}","import { tasksReducer } from '../features/tasks-reducer'\r\nimport { todolistsReducer } from '../features/todolists-reducer'\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport {appReducer} from './app-reducer'\r\nimport thunk from 'redux-thunk'\r\nimport {TypedUseSelectorHook, useSelector} from 'react-redux'\r\nimport {authReducer} from '../features/todolistList/auth-reducer'\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> = useSelector\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react'\r\nimport Snackbar from '@mui/material/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert'\r\nimport {useAppSelector} from '../app/store'\r\nimport {useDispatch} from 'react-redux'\r\nimport {setAppErrorAC} from '../app/app-reducer'\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />\r\n})\r\n\r\nexport const ErrorSnackbar = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const error = useAppSelector<string | null>(state => state.app.error)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error} 😠\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}","import React from 'react'\r\nimport Grid from '@mui/material/Grid'\r\nimport Checkbox from '@mui/material/Checkbox'\r\nimport FormControl from '@mui/material/FormControl'\r\nimport FormControlLabel from '@mui/material/FormControlLabel'\r\nimport FormGroup from '@mui/material/FormGroup'\r\nimport FormLabel from '@mui/material/FormLabel'\r\nimport TextField from '@mui/material/TextField'\r\nimport Button from '@mui/material/Button'\r\nimport {useFormik} from 'formik'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {loginTC} from '../todolistList/auth-reducer'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {Navigate} from 'react-router-dom'\r\n\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {}\r\n            if (!values.email) {\r\n                errors.email = 'Email is required'\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address'\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Password is required'\r\n            } else if (values.password.length <= 3) {\r\n                errors.password = 'Password should be > 3'\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(formik.values))\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={'/'}/>\r\n    }\r\n\r\n    return (\r\n        <Grid container justifyContent={'center'}>\r\n            <Grid item justifyContent={'center'}>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormControl>\r\n                        <FormLabel>\r\n                            <p>To log in get registered\r\n                                <a href={'https://social-network.samuraijs.com/'}\r\n                                   target={'_blank'}> here\r\n                                </a>\r\n                            </p>\r\n                            <p>or use my account credentials:</p>\r\n                            <p>Email: dimasukhinov@yandex.by</p>\r\n                            <p>Password: project</p>\r\n                        </FormLabel>\r\n                        <FormGroup>\r\n                            <TextField label=\"Email\" margin=\"normal\" {...formik.getFieldProps('email')}/>\r\n                            {formik.touched.email && formik.errors.email &&\r\n                                <div style={{'color': 'red'}}>{formik.errors.email}</div>}\r\n                            <TextField type=\"password\" label=\"Password\"\r\n                                       margin=\"normal\" {...formik.getFieldProps('password')}/>\r\n                            {formik.touched.password && formik.errors.password &&\r\n                                <div style={{'color': 'red'}}>{formik.errors.password}</div>}\r\n                            <FormControlLabel label={'Remember me'}\r\n                                              control={<Checkbox\r\n                                                  checked={formik.values.rememberMe}\r\n                                                  {...formik.getFieldProps('rememberMe')}/>}\r\n                            />\r\n                            <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                                Login\r\n                            </Button>\r\n                        </FormGroup>\r\n                    </FormControl>\r\n                </form>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css'\r\nimport AppBar from '@mui/material/AppBar'\r\nimport Toolbar from '@mui/material/Toolbar'\r\nimport IconButton from '@mui/material/IconButton'\r\nimport Typography from '@mui/material/Typography'\r\nimport Button from '@mui/material/Button'\r\nimport {Menu} from '@mui/icons-material'\r\nimport Container from '@mui/material/Container'\r\nimport LinearProgress from '@mui/material/LinearProgress'\r\nimport {TodolistsList} from '../features/todolistList/TodolistList'\r\nimport {useAppSelector} from './store'\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar'\r\nimport {Login} from '../features/login/Login'\r\nimport {Routes, Route, Navigate} from 'react-router-dom'\r\nimport {useDispatch} from 'react-redux'\r\nimport CircularProgress from '@mui/material/CircularProgress'\r\nimport {logoutTC} from '../features/todolistList/auth-reducer';\r\n\r\nexport const App = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const status = useAppSelector<RequestStatusType>(state => state.app.status)\r\n    const isInitialized = useAppSelector<boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useAppSelector<boolean>(state => state.auth.isLoggedIn)\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    const logout = useCallback(() => dispatch(logoutTC()), [dispatch])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent: isLoggedIn ? 'space-between' : ''}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        Todolist\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logout}>Logout</Button>}\r\n                </Toolbar>\r\n            </AppBar>\r\n            {status === 'loading' && <LinearProgress color={'secondary'}/>}\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path='/' element={<TodolistsList/>}/>\r\n                    <Route path='login' element={<Login/>}/>\r\n                    <Route path='404' element={<h1>404: OOPS! PAGE NOT FOUND</h1>}/>\r\n                    <Route path='*' element={<Navigate to='404'/>}/>\r\n                </Routes>\r\n            </Container>\r\n            <ErrorSnackbar/>\r\n        </div>\r\n    )\r\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport {App} from './app/App'\nimport reportWebVitals from './reportWebVitals'\nimport {Provider} from 'react-redux'\nimport {store} from './app/store'\nimport {HashRouter} from 'react-router-dom'\n\nReactDOM.render(\n    <Provider store={store}>\n        <HashRouter>\n            <App/>\n        </HashRouter>\n    </Provider>,\n    document.getElementById('root')\n)\n\nreportWebVitals()"],"sourceRoot":""}